블로그가 금방끝나서 그냥 지금부터 연산자 하겠습니다. 

1. 연산자와 피연산자
2. 연산자의 종류
3. 연산자의 우선순위와 결합규칙
4. 산술변환

(1)-----------------------------------
  연산자의 정의는 연산을 수행하는 기호들 
  피연산자의 정의는 연산을 당하는 친구들 
  두개를 말로만 하면 솔직히 이해하기 어려우니깐 예시를 들어보자면
  A + B  가 있다. 연산자는 +, 피연사자는 A, B이다.
  
 (2)----------------------------------
  연산자의 종류는 여러가지가 있다. 
 
      종류               연산자                설명
  
  1.산술 연산자      + - * / % << >>       사칙연산(+, -, *, /)과 나머지연산(%)
  2.비교 연산자      > < >= <= == !=       크고 작음과 같고 다름을 비교
  3.논리 연산자      && || ! & | ^ ~       그리고 (AND)와 또는(OR)으로 조건을 연결
  4.대입 연산자             =              오른쪽의 있는 값을 왼쪽에 저장
  5.  기 타       (type) ?: instanceof   형변환 연산자, 삼항 연산자, instanceof연산자
  
  산술연산자는 우리가 흔히 사용하는 더하기 빼기 나누기 곱하기가 있다. 하지만 우리가 흔히 보지 못하는 연산자가 하나더 있다. 퍼센트(%, 나머지)라는 친구인데. 
  나누기를 한후 나머지를 구해준다. 
  
  비교연산자는 설명에 나와있는 것 처럼 작고 크고를 판단해 준다.
  
  논리 연산자 중에는 &&(2개가 같으면 참) ||(둘중 하나라도 참이면 참) !(참이면 부정, 부정이면 참) 있다. 지금 소개할 애들은 비트연산자이다.
  &(AND) |(OR) ^(XOR) ~(부정)
  
  대입 연산자는 설명에 나와있는 것 처럼 오른쪽의 있는 값을 왼쪽에 저장시킨다.
 (3)----------------------------------
  연산자의 우선순위와 결합규칙이 있다.
   
  연산을 할때에는 우선순위가 있다. 순위는 우리가 알고 있는 순위여서 이해하기 쉽다. 에를들면 x > 3 && x < 5 라면 &&보다 비교연산자인 >, < 가 우선 순위가 더 높아
  먼저 실행된다.
  하지만 이해하기 어려운 우선순위가 있다.  x << 2+1  같은 형태의 친구들이다. <<는 쉬프트연산자로 덧셈연산자 보다 우선순위가 낮아 2+1이 먼저 실행된다.
  
  연산자의 결합규칙은 대부분 왼쪽에서 오른쪽순서로 연산을 실행 하지만 대입 연산자만 오른쪽에서 왼쪽의 순서로 연산한다.
  예를 들면 5 + 5 - 2 이면 평범하게 왼쪽에서 오른쪽으로 연산하지만 x = y = 3 이라면 대입연산자이기 때문에 오른쪽에서 왼쪽으로 연산한다. 
  
  위에 있는 내용을 그림으로 나타내며 
  
  
      종류        결합규칙                연산자
   단항 연산자     <------       ++ -- + - ~ ! (type)
   산술 연산자     ------>       * / %
                ------>       + -
                ------>       << >>
   비교 연산자     ------>       < > <= >= instanceof
                ------>       == !=
   논리 연산자     ------>       &
                ------>       ^
                ------>       |
                ------>       &&
                ------>       ||
   삼항 연산자     ------>       ?:
   대입 연산자     <------       = += -= *= /= %= <<= >>= &= ^= |=
   
 (4)--------------------------------
  산술 변환은
  두개의 피연산자가 있다. 근데 두피연사자가 자료형이 다르면 좀더 큰 크기의 자료형으로 바뀐다. 예를 들면 
  long + int ----> long + long ---->long int타입이 long보다 작기 때문에 int가 long형태로 바뀐다.
  float + int ---> float + float ---> float float과 int를 비교하면 float이 좀더 크기가 크기 때문에 int가 float형으로 바뀌엇다.
  double + float ----> double +double ---> double 더블형이 더 크기 때문에 플룻형이 더블형으로 바뀌엇다.
  
  피연산자의 타입이 int보다 작은 타입이면 int로 변환된다.
  byte + short ---> int + int ---> int
  char + short ---> int + int ---> int    byte short char모두가  int보다 크기가 작기 때문에 int형으로 바뀌었다.
    
   
 
    
