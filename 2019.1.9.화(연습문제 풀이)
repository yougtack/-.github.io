저 pdf파일이랑 소스코드 짠거는 https://github.com/yougtack/YT_Kim.github.io 여기다가 따로 올리겠습니다.


[3-1] 다음 연산의 결과를 적으시오.
int x = 2;
int y = 5;
char c = 'A'; // 'A'의 문자코드는 65  'B'=66   'C'=67

System.out.println(1 + x << 33); x는 2이므로 1+2가 된다. 그럼 3 << 33 인데 int타입은 4byte(32bit)이므로 1번만 움직이면 된다. 즉 3 << 1 이다.
그러므로 값은 110이 되고 이걸 10진수로 풀면 6이 된다.

System.out.println(y >= 5 || x < 0 && x > 2); y>=5(true), x<0(false), x>2(false). true || false && false 이다. 여기서 ||보다 &&가
우선 순위를 가지고 있기 때문에 &&가 먼저 실행되어 true || false가 되고 결과로는 ture를 얻게 된다.

System.out.println(y += 10 - x++); y+10=15이고 x는 후위형 이기 때문에 값이 먼저 저장되어 15-2가된다. 그래서 값은 13이 된다.

System.out.println(x+=2); 앞에 문제에서 x의 값이 후위형으로 값이 1증가되었기 때문에 x = x + 2, x = 3 + 2, x = 5가 된다.

System.out.println( !('A' <= c && c <='Z') ); true && ture 이다 그럼 값은 ture인데 마지막에 !(부정)이 있기 때문에 flase로 바뀌었다.

System.out.println('C'-c); C는 67의 유니코드값을 가지고 있다. char 형은 int타입보다 바이트가 적으므로 int타입으로 형변환 된다. 67 - 65 가 되기 때문에
값은 2가 나온다.

System.out.println('5'-'0'); 5의 유니코드 값은 53 0의 유니코드 값은 48 이기 때문에 53-48=5
System.out.println(c+1); c는 A로 값이 65가 된다. 여기에 +1을 하니 값은 66이 된다. 
System.out.println(++c); 전위형으로 저장하기 때문에 A+1을 하고 나면 B가 나온다.
System.out.println(c++); 후위형이기 때문에 먼저 저장한다음 +1을 해준다. 그래서 값은 B가 나온다.
System.out.println(c);  전에 저장해줬던 값이 후위형이므로 현재 변수c의 있는 캐릭터형은 C이다.

[3-2] 아래의 코드는 사과를 담는데 필요한 바구니(버켓)의 수를 구하는 코드이다.
      만일 사과의 수가 123개이고 하나의 바구니에는 10개의 사과를 담을 수 있다면, 
      13개의 바구니 가 필요할 것이다. (1)에 알맞은 코드를 넣으시오.

      int numOfApples = 123; // 사과의 개수
      int sizeOfBucket = 10; // 바구니의 크기(바구니에 담을 수 있는 사과의 개수)
      int numOfBucket = ( /* (1) */ ); // 모든 사과를 담는데 필요한 바구니의 수

      System.out.println("필요한 바구니의 수 :"+numOfBucket);
      
    고민해야할 것은 사과의 갯수가 130개면 바구니가 13개 필요하고 131개면 14개 필요한데 이걸 어떡게 구분하냐 였다. 나누기랑 별걸 다하다가 삼항연산자를 사용하기로
    했다. 
    먼저 바구니의 십의 자리수는 numOfApples/sizeOfBucket으로 구하였다. 여기에 삼항연산자를 추가했다. +numOfApples%sizeofBucket > 0 ? 1 : 0
    이렇게 해서 바구니수의 일의자리수를 구하였다. 

[3-3] 아래는 변수 num의 값에 따라 ‘양수’, ‘음수’, ‘0’을 출력하는 코드이다. 삼항 연산 자를 이용해서 (1)에 알맞은 코드를 넣으시오.

      int num = 10;
      System.out.println( /* (1) */ );
       
      이것도 삼항 연산자를 이용하였는데 삼항연산자는 조건이 2개밖에 못넣는데 어떡게 해야하나 고민을 하였다. 그래서 그냥 조건 안에 또 조건을 넣어 보았는데 되었다.
      완전 운이 좋게 됬다. 
      num > 0 ? "양수" :(num < 0 ? "음수" : "0");
      
[3-4] 아래는 변수 num의 값 중에서 백의 자리 이하를 버리는 코드이다. 
만일 변수 num 의 값이 ‘456’이라면 ‘400’이 되고, ‘111’이라면 ‘100’이 된다. 
(1)에 알맞은 코드를 넣으 시오.
      
     int num = 456;
     System.out.println( /* (1) */ );
     
     처음엔 뭔 소린가 했는데 자바의 정석 책의 비슷한 예제가 있어 금방 풀었다. 
     456/100을 하면 먼저 값은 4가 되고 *100 을 해주면 400이 된다. 즉 나눗셈 연산자를 사용하면 반올림을 하지 않는다.
     
[3-5] 아래는 변수 num의 값 중에서 일의 자리를 1로 바꾸는 코드이다.
만일 변수 num의 값이 333이라면 331이 되고, 777이라면 771이 된다.
(1)에 알맞은 코드를 넣으시오.

    int num = 333; 
    System.out.println( /* (1) */ );
    
    num/10*10+1
    위에 비슷한 문제 같다. 먼저 num을 10으로 나눈뒤 10을 곱하면 num은 330이 된다. 거기서 1을 + 해주면 331이 된다. 
      
      
     
