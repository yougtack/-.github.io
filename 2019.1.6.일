1.대소 비교 연산자
2.등가비교 연산자
3.논리 연산자
4.비트 연산자



(1)----------------------------
  값의 크기를 비교할때 사용하는 연산자이다. 종류는 <, > =<, >= 가 있다. 주로 if문을 사용할때 사용된다. 기본형에는 모두다 사용 할 수 있지만 boolean은 제외 된다.
  또한 참조형도 사용 할 수 없다. 
(2)----------------------------
  등가비교는 값이 같은지 다른지를 판단 해 준다. 또한 등가 비교 연산자는 대소 비교 연산자와 다르게 기본형과 참조형 모두 사용 할 수 있다. 
  종류는 2가지 ==, !=가 있다. ==는 왼쪽의 값과 오른쪽의 값이 같은지 확인하는 연산자이고 !=는 왼쪽과 오른쪽의 값이 다른지 확인하는 연산자이다.
  
  대소 비교 연산자의 =>, <= 와 등가 비교 연산자 ==, != 모두 두개의 기호로 이루어진 연산자는 그사이의 공백이 있으면 안된다. 
(3)----------------------------
  논리 연사자는 두개 이상의 조건을 하나의 식으로 연결 해준다. 종류로는 3가지 있다.(!, ||, &&)
  !는 부정이란 의미를 가지고 있다. 만약 boolean x= ture; 라고 하면 x!는 false 가 된다. 
  
  ||(OR)은 두개 중 하나라도 참이면 참으로 표시 된다. 예시로는 int a =10; int b = 20; 이라고 치면 5 > a || 10 < b = true 이다.
    5 > a 는 5 > 10 이여서 false지만 10 < b 가 10 < 20 이므로 ture 가 된다 그러므로 false || ture = ture 가 된다.
 
  &&(AND)는 두개의 값이 같아야 만 참이 된다. 위와같이 a=10; b=20;이고 5 < a && 10 < b 라는 식이 있으면
    5 < a = 5 < 10이 되고 10 < b = 10 < 20 이 되기 때문에 ture && ture = true가 된다. 만약 둘중 하나라도 false거나 둘다 false라면 
    값은 false가 출력 될 것 이다.
  
(4)----------------------------
 비트연산자는 논리 연산자와 약간 비슷하다. 
 먼저 종류는 4가지로 &(AND), |(OR), ^(XOR), ~(부정)가 있다.
 비트연산자를 당하는 피연산자들은 2진수로 바뀐다음 비트연산자가 사용 되어 진다. 에로는 x=5, y=7이고 x & y라는 식이 있으면 일단 먼저 x와 y를 컴퓨터가 알아서
 2진수로 바꿔준다. 5의 2진수는 101이고 7의 2진수는 111이다. 이걸 &연산하면  101 이 된다. 또 여기서 출력을 할때 2진수로 출력을 하고 싶으면 
                                                              111
                                                              ---
                                                              101 
 .toBinaryString();을 사용해야 한다. 이 메서드는 4바이트의 정수를 32자리의 2진수로 변환해 준다.

 |(OR) 비트연산자의 사용 방식은 위의 예시 그대로 가져와서 101 이다 즉 값은 7이 된다.
                                              111
                                              ---
                                              111
 
^(XOR) 비트 연산자의 사용방식은 101  이다. 값은 3이된다. 3번째 자리에 있는 수는 XOR 하면 0 이 되기 때문에 맨앞의 0을굳이 안써 줘도 된다.
                          111
                          ---
                           10
~(부정) 비트 연산자의 사용방식은 101 이라는 2진수가 있으면 10이 된다. 하지만 101은 5라는 양수 지만 ~을 사용하면 음수가 된다. 왜냐하면 ~을 사용하면 보수가 
되기 때문에 부호비트도 바뀌게 된다. 
                          
                           
 

